Questions: -

1. How do the declarations look in the GIMPLE? Specifically, what happens to multiple variables declared and initialized on the same line? What happens to global declaration [int Z]?
Ans-            main()
                {
                   Int a;
                   int b;
                   int c;
                   int p;
                   int q;
                   double r;
                   p= 6;
                   a=10;
                   b=20;
                   _1= a*b;
                   c= _1+25;
                   p=6;
                   q=Z;
                    r=3.45e+1;
                    _2= (int) r;
                   Z= _2;
                   Z.0_3=Z;
                   _4= Z.0_3 +1;
                   Z= _4
                }
                 
Above given code is a declaration look in the GIMPLE. The multiple variables that are declared and initiated on the same line are declared separately in a single statement like one
 variable declared in one line and another on another line. The global declaration disappears in GIMPLE and the operations takes place within the function.


2. How are complex expressions such as [c = a * b + 25] broken down? Can you determine a rule as to when temporary variables will be introduced?
Ans- The complex expressions such as (c=a*b+25) are broken down and only one operation takes place at a time. When we run any complex expression, it depends on the expression that how many 
operators are use like in the given expression we used two operators and then it is broken down into two parts. First part is where we determine the product of a and b and assign a 
temporary variable (_1) to it i.e. _1=a*b. And in second part, we determine the value of c i.e. c=_1 + 25.  Temporary are introduced whenever an operation is used as an intermediate 
component of a computation.

3. How are floats/doubles represented in GIMPLE? What happens when a float/double is assigned to an integer in [Z = r]?
Ans- Float and double are used to represent fractional values but the different is that float is a single precision floating point (32 bits) and double is double precision floating point 
(64 bits). 
We assigned ‘double’ to a variable(r) in the given code and in GIMPLE it is represented in scientific notation ( r=3.45e+1). When we assign float/double to an integer we can write the
 numbers in fractional form. So, an explicit cast is inserted when a float is assigned to an integer.

4. How are reads/writes to the global variable Z performed?  Why is
 there a temporary introduced for the statement [Z = Z + 1] but not for the statements [q = Z] or [Z = p]?
Ans- The global variable Z performed through values stores in the local storage. A temporary is used for Z=Z+1 because the result of the expression (Z+1) cannot be written directly to a 
memory location.



Additional Question-

Try to understand the underlying GIMPLE representation by looking at the
        RAW dumps:


main ()  
gimple_bind <
  int a;
  int b;
  int c;
  int p;
  int q;
  double r;
                                        
  gimple_assign <integer_cst, p, 6, NULL, NULL>
  gimple_assign <integer_cst, a, 10, NULL, NULL>
  gimple_assign <integer_cst, b, 20, NULL, NULL>
  gimple_assign <mult_expr, _1, a, b, NULL>
  gimple_assign <plus_expr, c, _1, 25, NULL>
  gimple_assign <integer_cst, p, 6, NULL, NULL>
  gimple_assign <var_decl, q, Z, NULL, NULL>
  gimple_assign <real_cst, r, 3.45e+1, NULL, NULL>
  gimple_assign <fix_trunc_expr, _2, r, NULL, NULL>
  gimple_assign <ssa_name, Z, _2, NULL, NULL>
  gimple_assign <var_decl, Z.0_3, Z, NULL, NULL> 
  gimple_assign <plus_expr, _4, Z.0_3, 1, NULL> 
  gimple_assign <ssa_name, Z, _4, NULL, NULL>
> 


